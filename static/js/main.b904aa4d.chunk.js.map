{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","fileArray","useRef","useState","fileName","setFileName","loaded","setloaded","type","setType","getData","iniFile","name","positionArray","exclude92to84","i","includes","position","Landmark","split","object","x","parseInt","y","push","newInput","JSON","stringify","downloadText","filename","text","element","document","createElement","setAttribute","encodeURIComponent","click","className","style","height","window","innerHeight","display","flexDirection","justifyContent","alignSelf","top","id","accept","onChange","e","current","target","files","tempName","length","uploadFile","multiple","key","value","defaultChecked","checked","onClick","undefined","index","fileReader","FileReader","onload","fileLoadedEvent","ini","parse","result","tempFileName","readAsText","startParse","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b904aa4d.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\nimport ini from \"ini\"; // 可直接將ini檔轉成object\n\nconst App = () => {\n  let fileArray = useRef(); //上傳檔案的指標\n  const [fileName, setFileName] = useState('無');\n  const [loaded, setloaded] = useState('預備中');\n  const [type, setType] = useState('84');\n\n  const uploadFile = (e) => { //處理上傳的檔案\n    setFileName('無')\n    fileArray.current = e.target.files //指標指向的位置\n    let tempName = '';\n    for (let i = 0; i < e.target.files.length; i++) {\n      tempName += e.target.files[i].name;\n      if (i !== e.target.files.length - 1)\n        tempName += \" | \";\n    }\n    setFileName(tempName);\n    setloaded('預備中')\n  }\n\n  const startParse = () => {\n    if (fileArray.current === undefined)\n      return\n    setloaded('轉換中')\n    let index = 0\n    const fileReader = new FileReader();\n    fileReader.onload = function (fileLoadedEvent) {\n      const iniFile = ini.parse(fileLoadedEvent.target.result);\n      const tempFileName = fileArray.current[index].name.split('.')\n      getData(iniFile, tempFileName[0]);\n      if (index < fileArray.current.length - 1) { //使用for迴圈的話，會因為非同步的關係，造成Readerbuffer阻塞，所以使用recursion\n        index++;\n        fileReader.readAsText(fileArray.current[index], \"UTF-8\");\n      }\n    };\n    fileReader.readAsText(fileArray.current[index], \"UTF-8\");\n  }\n\n  const getData = (iniFile, name) => { //將 ini. 檔轉換成json\n    const positionArray = [];\n    const exclude92to84 = [35, 37, 84, 86, 87, 89, 90, 91];\n    for (let i = 0; i <= 91; i++) {\n      if (type === '84')\n        if (exclude92to84.includes(i))\n          continue\n      const position = iniFile.Landmark[`Landmark_${i}`].split(\" \");\n      const object = {x: parseInt(position[0]), y: parseInt(position[1])};\n      positionArray.push(object);\n    }\n    const newInput = JSON.stringify(positionArray, null, 2);\n    downloadText(`${name}.json`, newInput)\n  }\n\n  const downloadText = (filename, text) => { //直接在真實的Dom操作下載link，用react的話還要ref\n    let element = document.createElement('a'); \n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n    element.click();\n    setloaded('下載完成')\n  }\n\n  return (\n    <div className=\"container bg-white\" style={{height: window.innerHeight + 'px', display: 'flex', flexDirection: 'column', justifyContent: 'center'}}>\n      <h1 style={{alignSelf: 'center', position: 'absolute', top: '50px'}}>.ini轉JSON</h1>\n      <input className=\"form-control\" id=\"upload\" type=\"file\" accept=\".ini\" onChange={(e) => uploadFile(e)} multiple />可多選\n      <hr />\n      檔案 : {fileName}\n      <hr />\n      <div>\n        <input key={0} type=\"radio\" name=\"type\" value={'84'} defaultChecked={true} onChange={(e) => (e.target.checked === true && setType('84'))} />84個、\n        <input key={1} type=\"radio\" name=\"type\" value={'92'} onChange={(e) => (e.target.checked === true && setType('92'))} />92個 特徵點　　　目前WCM預設84個\n      </div>\n      <hr />\n      模式 : {type}個特徵點\n      <hr />\n      <button className=\"btn btn-primary\" onClick={() => startParse()} >下載</button>\n      <hr />\n      處理狀態 : {loaded}\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}